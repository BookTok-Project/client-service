// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package pg

import (
	"context"
)

const getSubscribeeIDs = `-- name: GetSubscribeeIDs :many
SELECT subscribee_id
FROM subscriptions
WHERE subscriber_id = $1
`

func (q *Queries) GetSubscribeeIDs(ctx context.Context, subscriberID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getSubscribeeIDs, subscriberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var subscribee_id int64
		if err := rows.Scan(&subscribee_id); err != nil {
			return nil, err
		}
		items = append(items, subscribee_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriberIDs = `-- name: GetSubscriberIDs :many
SELECT subscriber_id
FROM subscriptions
WHERE subscribee_id = $1
`

func (q *Queries) GetSubscriberIDs(ctx context.Context, subscribeeID int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, getSubscriberIDs, subscribeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var subscriber_id int64
		if err := rows.Scan(&subscriber_id); err != nil {
			return nil, err
		}
		items = append(items, subscriber_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const subscribe = `-- name: Subscribe :exec
INSERT INTO subscriptions (subscriber_id, subscribee_id)
VALUES ($1, $2)
`

type SubscribeParams struct {
	SubscriberID int64
	SubscribeeID int64
}

func (q *Queries) Subscribe(ctx context.Context, arg SubscribeParams) error {
	_, err := q.db.Exec(ctx, subscribe, arg.SubscriberID, arg.SubscribeeID)
	return err
}
